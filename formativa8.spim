.data
  num:  .float 0.0
  hex:  .asciiz "0x"
  sinal_positivo: .asciiz "+\n"
  sinal_negativo: .asciiz "-\n"
  resultado: .space 10
  linha:  .asciiz "\n"


.text

main:
  li $v0, 6 #read float
  syscall
  s.s $f0, num #valor foat

  li $v0,2
  l.s $f12, num #print float
  syscall
  jal pula_linha #quebra de linha

  lw $t0, num #set valor na memoria

  ori $t1, $zero, 0x1 #bit a bit
  sll $t1, $t1, 31 #desloca esquerda 31 bits
  and $a0, $t1, $t0 
  srl $a0, $a0, 31 #desloca para direita 31 bits
  add $t2, $zero, $a0 
  bgez $t0, print_positivo #verifica sinal
  bltz $t0, print_negativo

main_2:
  ori $t1, $zero, 0xFF #bit a bit 
  sll $t1, $t1, 23 #desloca esquerda 23 bits
  and $a0, $t1, $t0
  srl $a0, $a0, 23 #desloca direita 23 bits
  addi $t3, $zero, 127 ## adiciona bit a bit a t3
  sub $a0, $a0, $t3 # sub a0 - t3
  addi $v0 $zero 1 # print expoente
  syscall
  jal pula_linha # print quebra de linha

  li $v0, 4 
  la $a0, hex # print prefixo
  syscall

  ori $t1, $zero, 0xFFFF #bit a bit FFFF
  sll $t1, $t1, 7 # desloca esquerda 7 bits
  ori, $t1, $t1, 0x7F #bit a bit 
  and $a0, $t1, $t0
  jal valor_hex 

valor_hex:
  sub $sp, $sp, 24 # sub ultimo local da pilha 
  sw $a0, 0($sp) #guardar valor do ultimo local da pilha
  sw $s0, 4($sp)
  sw $s1, 8($sp)
  sw $s2, 12($sp)
  sw $s3, 16($sp)
  sw $s4, 20($sp)
  move $s2, $a0
  li $s0, 8 #8 digitos para hexdecimal
  la $s3, resultado
  move $s5, $zero
  addi $s6, $zero, 8
  jal loop 
  jr $ra

loop: 
  rol $s2, $s2, 4 # iniciar com numero a esquerda
  and $s1, $s2, 0xf 
  ble $s1, 9, print_hex # condição para printar menor que 9
  add $s1, $s1, 7 #else para letras


print_hex:

  addi $s5, $s5, 1 
  add $s1, $s1, 48 #pegar valores tabela ascii
  sb $s1, ($s3) #guardar valor de bit
  add $s3, $s3, 1 
  add $s0, $s0, -1
  bne $s5, $s6 loop #condição para ir no loop 
  la $a0, resultado
  li $v0, 4
  syscall
  
  j encerra

pula_linha:
  li $v0, 4
  la $a0, linha
  syscall
  jr $ra


print_negativo:
  li $v0, 4
  la $a0, sinal_negativo
  syscall
  j main_2

print_positivo:
  li $v0, 4
  la $a0, sinal_positivo
  syscall
  j main_2

  encerra:
  jal pula_linha
  li $v0, 10
  syscall 

  